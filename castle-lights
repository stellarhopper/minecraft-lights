-- local arg = { ... }

local function is_light()
	local rc, blk_type = turtle.inspect()
	if not rc then
		print("lightchk: inspect returned: "..tostring(rc))
		return rc
	end

	a, b = string.find(blk_type.name, ".illumination.lamp")
	if a then
		print("lightchk: is light")
		return true
	end
	return false
end

function is_floor()
	local rc, blk_type = turtle.inspectDown()
	return rc
end

function is_f_block()
	local rc, blk_type = turtle.inspect()
	return rc
end

local function move_fu()
	turtle.turnRight()
	turtle.up()
	turtle.forward()
	turtle.turnLeft()
end

local function move_db()
	turtle.turnRight()
	turtle.back()
	turtle.down()
	turtle.turnLeft()
end

local function check_corner(direction)
	turtle.forward()
	-- if it was a corner, now we should be facing a light
	if is_light() then
		if is_floor() then
			turtle.back()
			return false
		end
		print("found corner going "..tostring(direction))
		if direction then
			-- navigate forward turn
			turtle.turnRight()
			turtle.forward()
			turtle.turnLeft()
			turtle.forward()
			turtle.turnLeft()
			return true
		else
			-- navigate reverse turn
			turtle.turnLeft()
			turtle.forward()
			turtle.turnRight()
			turtle.forward()
			turtle.turnRight()
			return true
		end
	else
		-- wasn't a light, return to original position
		print("corner test: not a corner")
		turtle.back()
		return false
	end
end

local function check_roof()
	turtle.forward()
	if not is_light() then
		if is_f_block() then
			turtle.up()
			turtle.forward()
			if is_floor() then
				-- we're on the roof!
				print("on roof")
				turtle.back()
				turtle.back()
				turtle.down()
				turtle.down()
				return true
			else
				print("BUG: roof check 1 (no roof floor?)")
				exit()
			end
		else
			print("BUG: roof check 2 (no f_block)")
			exit()
		end
	else
		print("BUG: roof check 3 (uncaught corner?)")
		exit()
	end
	turtle.back()
end

local function move_unit(direction)
	if direction then
		move_fu()
	else
		move_db()
	end

	local light = is_light()
	if light then
		return true, true
	end

	if is_floor() then
		return true, false
	end

	if not light then
		-- test for corner
		if check_corner(direction) then
			return true, true
		elseif check_roof() then
			return true, false
		else
			print("BUG: neither corner nor roof")
			return false, false
		end
	end
end

-- true = forward
-- false = backward
local direction = true

print("Starting light-controlling-space-turtle!")
redstone.setOutput("left", true)
redstone.setOutput("front", true)

while true do
	rc, dir = move_unit(direction)
	if not rc then
		print("stopping")
		break
	end
	if direction ~= dir then
		print("main: reversing direction to: "..tostring(dir))
		direction = dir
	end
end

-- vim:ft=lua
